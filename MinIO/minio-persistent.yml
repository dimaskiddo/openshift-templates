kind: Template
apiVersion: v1
metadata:
  name: minio-persistent
  annotations:
    openshift.io/display-name: 'Minio'
    description: "Minio. You must have persistent volumes available in your cluster to use this template."
    tags: "object,storage,s3,minio"
    iconClass: "fa fa-hdd-o"

parameters:
  - name: MINIO_NAME
    displayName: "Minio Name"
    description: "A reference to Minio name."
    from: "[a-zA-Z0-9]{10}"
    value: "minio"
    required: true

  - name: MINIO_ACCESS_KEY
    displayName: "Minio Access Key"
    description: "A reference to Minio access key."
    from: "[a-zA-Z0-9]{20}"
    generate: expression
    required: true

  - name: MINIO_SECRET_KEY
    displayName: "Minio Secret Key"
    description: "A reference to Minio secret key."
    from: "[a-zA-Z0-9]{40}"
    generate: expression
    required: true

  - name: MINIO_DOMAIN_URL
    displayName: "Minio Domain URL"
    description: "A reference to Minio domain URL."
    from: "[a-zA-Z0-9]{100}"

  - name: MINIO_VOLUME_CAPACITY
    displayName: "Minio Volume Capacity"
    description: "Volume space available for minio data, e.g. 512Mi, 2Gi."
    value: "1Gi"
    required: true

objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: '${MINIO_NAME}'
    stringData:
      MINIO_ACCESS_KEY: '${MINIO_ACCESS_KEY}'
      MINIO_SECRET_KEY: '${MINIO_SECRET_KEY}'

  - kind: Service
    apiVersion: v1
    metadata:
      name: "${MINIO_NAME}"
    spec:
      ports:
        - name: "minio-http"
          port: "9000"
      selector:
        name: "${MINIO_NAME}"

  - kind: Route
    apiVersion: v1
    metadata:
      name: "${MINIO_NAME}"
    spec:
      host: ${MINIO_DOMAIN_URL}
      to:
        kind: Service
        name: ${MINIO_NAME}
      port:
        targetPort: minio-http

  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: "${MINIO_NAME}"
      label:
        name: "${MINIO_NAME}"
    spec:
      replicas: 1
      selector:
        name: "${MINIO_NAME}"
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: "${MINIO_NAME}"
        spec:
          containers:
            - env:
              - name: MINIO_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    name: '${MINIO_NAME}'
                    key: MINIO_ACCESS_KEY
              - name: MINIO_SECRET_KEY
                valueFrom:
                  secretKeyRef:
                    name: '${MINIO_NAME}'
                    key: MINIO_SECRET_KEY
              name: 'minio'
              image: 'dimaskiddo/debian:minio-1.0'
              imagePullPolicy: Always
              ports:
                - containerPort: 9000
                  protocol: TCP
              readinessProbe:
                failureThreshold: 3
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                tcpSocket:
                  port: 9000
                timeoutSeconds: 1
              volumeMounts:
                - name: minio-data
                  mountPath: "/data/minio"
          volumes:
            - name: minio-data
              persistentVolumeClaim:
                claimName: ${MINIO_NAME}
      triggers:
        - type: ConfigChange

  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${MINIO_NAME}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: '${MINIO_VOLUME_CAPACITY}'

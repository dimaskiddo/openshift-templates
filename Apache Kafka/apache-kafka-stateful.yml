kind: Template
apiVersion: v1
metadata:
  name: apache-kafka-stateful
  annotations:
    openshift.io/display-name: 'Apache Kafka Cluster (Persistent)'
    description: "Apache Kafka Cluster. You must have persistent volumes available in your cluster to use this template."
    tags: "messaging,queue,apache,kafka"
    iconClass: "icon-scala"

parameters:
  - name: KAFKA_NAME
    displayName: "Kafka Name"
    description: "A reference to Kafka name."
    from: "[a-zA-Z0-9]{10}"
    value: "kafka-cluster"
    required: true

  - name: KAFKA_BROKER_REPLICAS
    displayName: "Kafka Broker Replication Number"
    description: "A reference to kafka broker replication number."
    from: "[0-9]{2}"
    value: "3"
    required: true

  - name: KAFKA_BROKER_VOLUME_CAPACITY
    displayName: "Kafka Broker Volume Capacity"
    description: "Volume space available for kafka broker data, e.g. 512Mi, 2Gi."
    value: "1Gi"
    required: true

  - name: KAFKA_ZOOKEEPER_REPLICAS
    displayName: "Kafka Zookeeper Replication Number"
    description: "A reference to kafka zookeeper replication number."
    from: "[0-9]{2}"
    value: "3"
    required: true

  - name: KAFKA_ZOOKEEPER_VOLUME_CAPACITY
    displayName: "Kafka Zookeeper Volume Capacity"
    description: "Volume space available for kafka zookeeper data, e.g. 512Mi, 2Gi."
    value: "1Gi"
    required: true

objects:
  - kind: Service
    apiVersion: v1
    metadata:
      name: "${KAFKA_NAME}-broker-hs"
    spec:
      clusterIP: None
      ports:
        - name: "kafka"
          port: "9092"
      selector:
        name: "${KAFKA_NAME}-broker"

  - kind: Service
    apiVersion: v1
    metadata:
      name: "${KAFKA_NAME}-broker"
    spec:
      ports:
        - name: "kafka"
          port: "9092"
      selector:
        name: "${KAFKA_NAME}-broker"

  - kind: Service
    apiVersion: v1
    metadata:
      name: "${KAFKA_NAME}-zookeeper-hs"
    spec:
      clusterIP: None
      ports:
        - name: "zookeeper-server"
          port: "2888"
        - name: "zookeeper-election"
          port: "3888"
      selector:
        name: "${KAFKA_NAME}-zookeeper"

  - kind: Service
    apiVersion: v1
    metadata:
      name: "${KAFKA_NAME}-zookeeper"
    spec:
      ports:
        - name: "zookeeper-client"
          port: "2181"
      selector:
        name: "${KAFKA_NAME}-zookeeper"

  - kind: StatefulSet
    apiVersion: apps/v1
    metadata:
      name: "${KAFKA_NAME}-broker"
      label:
        name: "${KAFKA_NAME}-broker"
    spec:
      serviceName: "${KAFKA_NAME}-broker-hs"
      replicas: "${KAFKA_BROKER_REPLICAS}"
      updateStrategy:
        type: RollingUpdate
      podManagementPolicy: Parallel
      template:
        metadata:
          labels:
            name: "${KAFKA_NAME}-broker"
        spec:
          containers:
            - env:
                - name: 'KAFKA_CONF_ZOOKEEPER_CONNECT'
                  value: '${KAFKA_NAME}-zookeeper:2181'
              name: "${KAFKA_NAME}-broker"
              image: "telkomindonesia/alpine:kafka-2.1"
              imagePullPolicy: Always
              ports:
                - containerPort: 9092
                  protocol: TCP
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                tcpSocket:
                  port: 9092
                timeoutSeconds: 1
              readinessProbe:
                failureThreshold: 3
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                tcpSocket:
                  port: 9092
                timeoutSeconds: 1
              volumeMounts:
                - name: data
                  mountPath: "/data"
      volumeClaimTemplates:
        - metadata:
            name: data
          spec:
            accessModes: [ ReadWriteOnce ]
            resources:
              requests:
                storage: "${KAFKA_BROKER_VOLUME_CAPACITY}"

  - kind: StatefulSet
    apiVersion: apps/v1
    metadata:
      name: "${KAFKA_NAME}-zookeeper"
      label:
        name: "${KAFKA_NAME}-zookeeper"
    spec:
      serviceName: "${KAFKA_NAME}-zookeeper-hs"
      replicas: "${KAFKA_ZOOKEEPER_REPLICAS}"
      updateStrategy:
        type: RollingUpdate
      podManagementPolicy: Parallel
      template:
        metadata:
          labels:
            name: "${KAFKA_NAME}-zookeeper"
        spec:
          containers:
            - env:
                - name: 'ZOOKEEPER_CONF_SERVER_COUNT'
                  value: '${KAFKA_ZOOKEEPER_REPLICAS}'
              name: "${KAFKA_NAME}-zookeeper"
              image: "telkomindonesia/alpine:kafka-2.1"
              imagePullPolicy: Always
              command:
                - /usr/local/docker/bin/entrypoint
                - zookeeper-server-start.sh
                - /opt/kafka/config/zookeeper.properties
              ports:
                - containerPort: 2181
                  protocol: TCP
                - containerPort: 2888
                  protocol: TCP
                - containerPort: 3888
                  protocol: TCP
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                tcpSocket:
                  port: 2181
                timeoutSeconds: 1
              readinessProbe:
                failureThreshold: 3
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                tcpSocket:
                  port: 2181
                timeoutSeconds: 1
              volumeMounts:
                - name: data
                  mountPath: "/data"
      volumeClaimTemplates:
        - metadata:
            name: data
          spec:
            accessModes: [ ReadWriteOnce ]
            resources:
              requests:
                storage: "${KAFKA_ZOOKEEPER_VOLUME_CAPACITY}"
